客户端-Client(C) 中控-Master(M) 游戏服-Game(G) 区服-Region(R)[跨服玩法]

中控只提供Http服务，不维持任何长连接，中控与游戏服之间的通信也由Http完成。
中控会向游戏服发起HTTP请求，一般用在SDK充值到账等情形。
客户端通过中控获取服务器列表后，只与对应游戏服建立一个TCP长连接。
游戏服与自己所属区服建立一个TCP长连接。
客户端与区服的通信经游戏服转发。

消息体前缀做为走向标识，逻辑模块与数据存储模块也走网络通信逻辑。
C:客户端 S:服务端 D:数据存取
所有消息都是单向的，请求和回复各占一个协议号。
一个请求可以没回复，也可以有多个回复。
没有请求时服务器也会根据需求逻辑主动给客户端发消息通知(Notify)。

网络消息由三部分组成：角色标识(RoleID)、协议号(Command)和数据(Data)
RoleID和Command一起封装在数据头中(NetPackageHeader)。
PS：登陆相关的部分消息没有RoleID。

Server和Net有自己独立的线程循环，它们之间通过NetMgr进行交流
核心在于两个临界队列：RecvQueue和SendQueue，保存于NetMgr中
队列元素格式为NetDataItem，包含了操作OP(ADD DEL UPDATE CMD)和对应参数
RecvQueue：
当Net有连接建立、断开和收到数据包时，会构造对应NetDataItem，放入RecvQueue中
Server循环会定时调用NetMgr的Dispatch函数，将队列里内容派发给Server
SendQueue：
当Server有消息需要发送、更新\断开某个连接时，会构造对应的NetDataItem，放入SendQueue中
Net循环会定时调用NetMgr的OnPostSend函数，将队列内容提交给Net

基础框架：Main、Server、NetMgr、Net关系
Main：
全局唯一，通过静态成员函数ServerMain::GetCurMain获取，成员包含Server和NetMgr。
Server:
提供一组函数处理网络消息，注册到NetMgr中,创建Server循环线程。
NetMgr：
包含Net成员，继承INetProcesser接口，将自己传入Net以收发网络消息，维护RecvQueue和SendQueue，创建Net循环线程。
Net：
分为NetServer和NetInternalConnection两种网络模块，通过传入的INetProcesser接口与外部进行协作。
NetServer用于监听端口，等待远端主动连接。NetInternalConnection用于主动连接远端(游戏服连区服)。


