数据按归属类型可分为服务器级和功能级。
服务器级：这些数据代表的是服务器运行的状态，如玩家数据、组队数据、排行榜等。
功能级：相当于服务器级数据的成员，且依赖于所归属的数据。如玩家背包、伙伴和成就等。


功能有逻辑和数据两大块。
功能：
所有功能都有一个功能对象，继承ModuleBase
监听对应事件和网络消息进行数据处理。

数据：
数据对象都有公共基类，一个数据对象可能包含其他数据对象。
对于功能级数据，逻辑模块会监听特定事件为所属功能创建相应的数据。
一个功能可能会有多种数据。如公会技能有属于玩家部分的，也有属于公会部分的。

数据公共基类 DataModel
DataModel可随意添加继承于DataModel的数据对象。
DataModel保存了两份属性集和技能集。
一份是自身基础提供的，一份是自身基础和所添加进来的DataModel总和。
属性和技能集采用Dirty思想，数据变化时只做标记，获取时检测标记是否重新计算。
Dirty标记也有两个，self_dirty和child_dirty。
当数据变化时，标记self_dirty，并且标记所有父节点的child_dirty。
GetSelf会检查self_dirty对自己部分进行重新计算，并清除标记。
GetAll会检查self_dirty和child_dirty，GetSelf+GetChildren进行重新计算，变清除标记。
若字节点属性变化需要导致父节点属性重算，则通过事件由父节点的逻辑模块去设置父节点self_dirty
属性计算依赖限制：
1、若A与B没有任何父子关系，则可以GetSelf和GetAll(GetAll不能出现循环依赖)来进行加成。
2、若A是B的直接或间接父节点
   -则A可以调用B的GetSelf和GetAll来进行加成
   -B只能调用A的GetSelf进行加成，且A的自身属性不能依赖B的计算结果。


举例：

1、伙伴功能

玩家模块PlayerModule
提供PlayerDataModel:DataModel用于扩展玩家数据，保存了玩家标识。
PlayerBaseData:PlayerDataModel表示在线玩家。
当创建玩家后，会发送PLAYER_CREATE事件，附带player相关参数。

伙伴模块PartnerModule
提供PlayerPartenrData:PlayerDataModel
监听PLAYER_CREATE事件，获取PlayerBaseData，添加PlayerPartenrData对象
监听PLAYER_CREATE，获取PlayerBaseData，添加PlayerPartenrData，发送读取请求附带相关参数
收到读取回复，获取PlayerBaseData->PlayerPartenrData初始化，通知客户端
受到伙伴相关请求时，获取PlayerBaseData->PlayerPartenrData处理，通知客户端
